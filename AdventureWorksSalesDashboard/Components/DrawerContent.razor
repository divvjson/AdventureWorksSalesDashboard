@inject DrawerService DrawerService
@inject IBrowserViewportService BrowserViewportService
@inject NavigationManager NavigationManager

<div class="drawer-content">
    <MudIconButton Style="position: absolute; top: 8px; left: 8px;"
                   Icon="@Icons.Material.Outlined.Close"
                   Size="Size.Small"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="@OnCloseClicked"
                   DisableElevation="true" />
    <div class="logo-container">
        <a class="logo-link" href="/" @onclick="HandleDrawerCloseOnNavigate">
            <img class="logo" src="/Images/logo.png" alt="logo" />
        </a>
    </div>
    <Divider />
    <div class="menu-container">
        <div class="drawer-section-title">
            Analysis
        </div>
        @foreach (var menuItem in MenuItems)
        {
            <MudButton Href="@menuItem.Href"
                       OnClick="HandleDrawerCloseOnNavigate"
                       Class="@(currentPage == menuItem.Href ? "menu-item--active" : "")"
                       Style="margin-top: 8px;">
                @menuItem.Name
            </MudButton>
        }
    </div>
    <Divider />
    @if (MenuItems.Any(menuItem => menuItem.Href == currentPage))
    {
        <div class="filter-container">
            <div class="drawer-section-title">
                Filter
            </div>
            @if (currentPage == "/Regional")
            {
                <RegionalFilter />
            }
        </div>
    }
</div>

@code {
    public List<MenuItem> MenuItems { get; set; } = new List<MenuItem>
    {
        new MenuItem
        {
            Href = "/Regional",
            Name = "Regional"
        },
        new MenuItem
        {
            Href = "/Product",
            Name = "Product"
        },
        new MenuItem
        {
            Href = "/Customer",
            Name = "Customer"
        }
    };

    private string currentPage = string.Empty;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;

        currentPage = new Uri(NavigationManager.Uri).LocalPath;
    }

    public async Task OnCloseClicked()
    {
        await DrawerService.Close();
    }

    public async Task HandleDrawerCloseOnNavigate()
    {
        var breakpoint = await BrowserViewportService.GetCurrentBreakpointAsync();

        if (breakpoint <= Breakpoint.Sm)
        {
            await DrawerService.Close();
        }
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentPage = new Uri(e.Location).LocalPath;

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    public class MenuItem
    {
        public required string Href { get; set; }

        public required string Name { get; set; }
    }
}
