@inject IDialogService DialogService

<div class="date-range-picker">
    <MudButton OnClick="() => ShowDatePickerDialog(DateRangePickerSelection.From)"
               Variant="Variant.Filled"
               DisableElevation="true"
               Style="font-size: 11px; height: 36.5px;">
        @if (FromDate is not null)
        {
            @FromDate.Value.ToShortDateString();
        }
        else
        {
            <div>From</div>
        }
    </MudButton>
    <div class="dash">-</div>
    <MudButton OnClick="() => ShowDatePickerDialog(DateRangePickerSelection.To)"
               Variant="Variant.Filled"
               DisableElevation="true"
               Style="font-size: 11px; height: 36.5px;">
        @if (ToDate is not null)
        {
            @ToDate.Value.ToShortDateString();
        }
        else
        {
            <div>To</div>
        }
    </MudButton>
</div>

@code {
    public DateTime? FromDate { get; set; }

    public DateTime? ToDate { get; set; }

    [Parameter]
    public EventCallback<DateTime?> OnFromDateChanged { get; set; }

    [Parameter]
    public EventCallback<DateTime?> OnToDateChanged { get; set; }

    public async Task ShowDatePickerDialog(DateRangePickerSelection selection)
    {
        var parameters = new DialogParameters();

        if (selection == DateRangePickerSelection.From)
        {
            parameters.Add("Title", "From date");
            parameters.Add("SelectedDate", FromDate);
        }
        else if (selection == DateRangePickerSelection.To)
        {
            parameters.Add("Title", "To date");
            parameters.Add("SelectedDate", ToDate);
        }

        var options = new DialogOptions
        { 
            CloseOnEscapeKey = true,
            DisableBackdropClick = true
        };

        var dialog = DialogService.Show<DatePickerDialog>(null, parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            return;
        }

        if (result.Data is not DateTime selectedDate)
        {
            return;
        }

        if (selection == DateRangePickerSelection.From)
        {
            FromDate = selectedDate;
            await OnFromDateChanged.InvokeAsync(FromDate);

            if (FromDate > ToDate)
            {
                ToDate = FromDate;
                await OnToDateChanged.InvokeAsync(ToDate);
            }
        }
        else if (selection == DateRangePickerSelection.To)
        {
            ToDate = selectedDate.Date.AddTicks(TimeSpan.TicksPerDay - 1);
            await OnToDateChanged.InvokeAsync(ToDate);

            if (ToDate < FromDate)
            {
                FromDate = ToDate;
                await OnFromDateChanged.InvokeAsync(FromDate);
            }
        }
    }

    public enum DateRangePickerSelection
    {
        From,
        To
    }
}
