@inject DrawerService DrawerService

<MudIconButton Style="@GetDrawerButtonStyle()"
               Icon="@Icons.Material.Outlined.Menu"
               Size="Size.Small"
               Variant="Variant.Filled"
               Color="Color.Primary"
               OnClick="OpenDrawer" />

@code {
    [Parameter]
    public string Margin { get; set; } = "0px";

    private string GetDrawerButtonStyle()
    {
        bool isClosed = DrawerService.State == DrawerService.DrawerState.Closing || DrawerService.State == DrawerService.DrawerState.Closed;
        string transitions = isClosed ? "opacity 225ms ease-in" : "none";
        return $"position: fixed; margin: {Margin}; opacity: {(isClosed ? 1 : 0)}; transition: {transitions}; pointer-events: {(isClosed ? "auto" : "none")};";
    }

    protected override void OnInitialized()
    {
        DrawerService.OnChange += HandleDrawerStateChange;
    }

    private void HandleDrawerStateChange()
    {
        StateHasChanged();
    }

    private async Task OpenDrawer()
    {
        await DrawerService.Open();
    }

    public void Dispose()
    {
        DrawerService.OnChange -= HandleDrawerStateChange;
    }
}
